// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace StravaDiscordBot.ParticipantApi.Clients.DiscordApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for StravaDiscordBotDiscordApi.
    /// </summary>
    public static partial class StravaDiscordBotDiscordApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverId'>
            /// </param>
            /// <param name='channelId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void SendTextMessageToChannel(this IStravaDiscordBotDiscordApi operations, string serverId, string channelId, SendTextMessageRequest body = default(SendTextMessageRequest))
            {
                operations.SendTextMessageToChannelAsync(serverId, channelId, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverId'>
            /// </param>
            /// <param name='channelId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendTextMessageToChannelAsync(this IStravaDiscordBotDiscordApi operations, string serverId, string channelId, SendTextMessageRequest body = default(SendTextMessageRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendTextMessageToChannelWithHttpMessagesAsync(serverId, channelId, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverId'>
            /// </param>
            /// <param name='channelId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void SendEmbedMessageToChannel(this IStravaDiscordBotDiscordApi operations, string serverId, string channelId, SendEmbedMessageRequest body = default(SendEmbedMessageRequest))
            {
                operations.SendEmbedMessageToChannelAsync(serverId, channelId, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverId'>
            /// </param>
            /// <param name='channelId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendEmbedMessageToChannelAsync(this IStravaDiscordBotDiscordApi operations, string serverId, string channelId, SendEmbedMessageRequest body = default(SendEmbedMessageRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendEmbedMessageToChannelWithHttpMessagesAsync(serverId, channelId, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverId'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            public static void RemoveAllInstancesOfRole(this IStravaDiscordBotDiscordApi operations, string serverId, string roleName)
            {
                operations.RemoveAllInstancesOfRoleAsync(serverId, roleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverId'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveAllInstancesOfRoleAsync(this IStravaDiscordBotDiscordApi operations, string serverId, string roleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveAllInstancesOfRoleWithHttpMessagesAsync(serverId, roleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void GrantRoleAssignments(this IStravaDiscordBotDiscordApi operations, string serverId, GrantRoleAssignmentsRequest body = default(GrantRoleAssignmentsRequest))
            {
                operations.GrantRoleAssignmentsAsync(serverId, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GrantRoleAssignmentsAsync(this IStravaDiscordBotDiscordApi operations, string serverId, GrantRoleAssignmentsRequest body = default(GrantRoleAssignmentsRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GrantRoleAssignmentsWithHttpMessagesAsync(serverId, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void SendDM(this IStravaDiscordBotDiscordApi operations, string userId = default(string), SendTextMessageRequest body = default(SendTextMessageRequest))
            {
                operations.SendDMAsync(userId, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendDMAsync(this IStravaDiscordBotDiscordApi operations, string userId = default(string), SendTextMessageRequest body = default(SendTextMessageRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendDMWithHttpMessagesAsync(userId, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
