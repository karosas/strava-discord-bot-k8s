// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace StravaDiscordBot.Workers.Clients.ParticipantApi.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class SummaryActivityResponse
    {
        /// <summary>
        /// Initializes a new instance of the SummaryActivityResponse class.
        /// </summary>
        public SummaryActivityResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SummaryActivityResponse class.
        /// </summary>
        /// <param name="type">Possible values include: 'AlpineSki',
        /// 'BackcountrySki', 'Canoeing', 'Crossfit', 'EBikeRide',
        /// 'Elliptical', 'Golf', 'Handcycle', 'Hike', 'IceSkate',
        /// 'InlineSkate', 'Kayaking', 'Kitesurf', 'NordicSki', 'Ride',
        /// 'RockClimbing', 'RollerSki', 'Rowing', 'Run', 'Sail', 'Skateboard',
        /// 'Snowboard', 'Snowshoe', 'Soccer', 'StairStepper',
        /// 'StandUpPaddling', 'Surfing', 'Swim', 'Velomobile', 'VirtualRide',
        /// 'VirtualRun', 'Walk', 'WeightTraining', 'Wheelchair', 'Windsurf',
        /// 'Workout', 'Yoga'</param>
        public SummaryActivityResponse(long? id = default(long?), string externalId = default(string), long? uploadId = default(long?), string name = default(string), double? distance = default(double?), int? movingTime = default(int?), int? elapsedTime = default(int?), double? totalElevationGain = default(double?), double? elevHigh = default(double?), double? elevLow = default(double?), string type = default(string), System.DateTime? startDate = default(System.DateTime?), System.DateTime? startDateLocal = default(System.DateTime?), string timezone = default(string), int? achievementCount = default(int?), int? kudosCount = default(int?), int? commentCount = default(int?), int? athleteCount = default(int?), int? photoCount = default(int?), int? totalPhotoCount = default(int?), bool? trainer = default(bool?), bool? commute = default(bool?), bool? manual = default(bool?), bool? privateProperty = default(bool?), bool? flagged = default(bool?), int? workoutType = default(int?), string uploadIdStr = default(string), double? averageSpeed = default(double?), double? maxSpeed = default(double?), bool? hasKudoed = default(bool?), string gearId = default(string), double? kilojoules = default(double?), double? averageWatts = default(double?), bool? deviceWatts = default(bool?), int? maxWatts = default(int?), int? weightedAverageWatts = default(int?))
        {
            Id = id;
            ExternalId = externalId;
            UploadId = uploadId;
            Name = name;
            Distance = distance;
            MovingTime = movingTime;
            ElapsedTime = elapsedTime;
            TotalElevationGain = totalElevationGain;
            ElevHigh = elevHigh;
            ElevLow = elevLow;
            Type = type;
            StartDate = startDate;
            StartDateLocal = startDateLocal;
            Timezone = timezone;
            AchievementCount = achievementCount;
            KudosCount = kudosCount;
            CommentCount = commentCount;
            AthleteCount = athleteCount;
            PhotoCount = photoCount;
            TotalPhotoCount = totalPhotoCount;
            Trainer = trainer;
            Commute = commute;
            Manual = manual;
            PrivateProperty = privateProperty;
            Flagged = flagged;
            WorkoutType = workoutType;
            UploadIdStr = uploadIdStr;
            AverageSpeed = averageSpeed;
            MaxSpeed = maxSpeed;
            HasKudoed = hasKudoed;
            GearId = gearId;
            Kilojoules = kilojoules;
            AverageWatts = averageWatts;
            DeviceWatts = deviceWatts;
            MaxWatts = maxWatts;
            WeightedAverageWatts = weightedAverageWatts;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public long? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uploadId")]
        public long? UploadId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "distance")]
        public double? Distance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "movingTime")]
        public int? MovingTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "elapsedTime")]
        public int? ElapsedTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "totalElevationGain")]
        public double? TotalElevationGain { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "elevHigh")]
        public double? ElevHigh { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "elevLow")]
        public double? ElevLow { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'AlpineSki',
        /// 'BackcountrySki', 'Canoeing', 'Crossfit', 'EBikeRide',
        /// 'Elliptical', 'Golf', 'Handcycle', 'Hike', 'IceSkate',
        /// 'InlineSkate', 'Kayaking', 'Kitesurf', 'NordicSki', 'Ride',
        /// 'RockClimbing', 'RollerSki', 'Rowing', 'Run', 'Sail', 'Skateboard',
        /// 'Snowboard', 'Snowshoe', 'Soccer', 'StairStepper',
        /// 'StandUpPaddling', 'Surfing', 'Swim', 'Velomobile', 'VirtualRide',
        /// 'VirtualRun', 'Walk', 'WeightTraining', 'Wheelchair', 'Windsurf',
        /// 'Workout', 'Yoga'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startDate")]
        public System.DateTime? StartDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startDateLocal")]
        public System.DateTime? StartDateLocal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timezone")]
        public string Timezone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "achievementCount")]
        public int? AchievementCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "kudosCount")]
        public int? KudosCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "commentCount")]
        public int? CommentCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "athleteCount")]
        public int? AthleteCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "photoCount")]
        public int? PhotoCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "totalPhotoCount")]
        public int? TotalPhotoCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "trainer")]
        public bool? Trainer { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "commute")]
        public bool? Commute { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "manual")]
        public bool? Manual { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "private")]
        public bool? PrivateProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "flagged")]
        public bool? Flagged { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "workoutType")]
        public int? WorkoutType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uploadIdStr")]
        public string UploadIdStr { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "averageSpeed")]
        public double? AverageSpeed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxSpeed")]
        public double? MaxSpeed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hasKudoed")]
        public bool? HasKudoed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gearId")]
        public string GearId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "kilojoules")]
        public double? Kilojoules { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "averageWatts")]
        public double? AverageWatts { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deviceWatts")]
        public bool? DeviceWatts { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxWatts")]
        public int? MaxWatts { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "weightedAverageWatts")]
        public int? WeightedAverageWatts { get; set; }

    }
}
