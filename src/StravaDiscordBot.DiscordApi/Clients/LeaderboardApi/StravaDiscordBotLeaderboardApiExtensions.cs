// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace StravaDiscordBot.DiscordApi.Clients.LeaderboardApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for StravaDiscordBotLeaderboardApi.
    /// </summary>
    public static partial class StravaDiscordBotLeaderboardApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<LeaderboardViewModel> GetAllLeaderboards(this IStravaDiscordBotLeaderboardApi operations)
            {
                return operations.GetAllLeaderboardsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LeaderboardViewModel>> GetAllLeaderboardsAsync(this IStravaDiscordBotLeaderboardApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllLeaderboardsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void CreateLeaderboard(this IStravaDiscordBotLeaderboardApi operations, LeaderboardViewModel body = default(LeaderboardViewModel))
            {
                operations.CreateLeaderboardAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateLeaderboardAsync(this IStravaDiscordBotLeaderboardApi operations, LeaderboardViewModel body = default(LeaderboardViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateLeaderboardWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='leaderboardId'>
            /// </param>
            public static LeaderboardViewModel GetLeaderboard(this IStravaDiscordBotLeaderboardApi operations, string leaderboardId)
            {
                return operations.GetLeaderboardAsync(leaderboardId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='leaderboardId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LeaderboardViewModel> GetLeaderboardAsync(this IStravaDiscordBotLeaderboardApi operations, string leaderboardId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLeaderboardWithHttpMessagesAsync(leaderboardId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='leaderboardId'>
            /// </param>
            /// <param name='start'>
            /// </param>
            public static LeaderboardResultViewModel GenerateLeaderboardResults(this IStravaDiscordBotLeaderboardApi operations, string leaderboardId, System.DateTime? start = default(System.DateTime?))
            {
                return operations.GenerateLeaderboardResultsAsync(leaderboardId, start).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='leaderboardId'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LeaderboardResultViewModel> GenerateLeaderboardResultsAsync(this IStravaDiscordBotLeaderboardApi operations, string leaderboardId, System.DateTime? start = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateLeaderboardResultsWithHttpMessagesAsync(leaderboardId, start, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
